def calculate_bonus(salary, grade):

    bonus_percentage = 0

    

    if grade == 'A':

        bonus_percentage = 0.05

    elif grade == 'B':

        bonus_percentage = 0.10

    

    if salary < 10000:

        bonus_percentage += 0.02

    

    bonus = salary * bonus_percentage

    total_salary = salary + bonus

    

    return bonus, total_salary



# Test cases

for _ in range(5):

    grade = input("Enter the grade of the employee: ")

    salary = float(input("Enter the employee salary: "))

    

    bonus, total_salary = calculate_bonus(salary, grade)

    print(f"Salary={salary}")

    print(f"Bonus={bonus}")

    print(f"Total to be paid: {total_salary}\n")



1.

def length_of_last_word(s):

    words = s.strip().split()  # Remove leading/trailing spaces and split the string

    if words:

        return len(words[-1])

    return 0



# Test cases

test_strings = [

    "Hello World",

    " fly me to the moon ",

    "luffy is still joyboy",

    "123",

    " 45&29 8*6^4"

]



for s in test_strings:

    result = length_of_last_word(s)

    print(f"Input: {s}")

    print(f"Output: {result}\n")



3.

def numSquares(n):

    dp = [float('inf')] * (n + 1)

    dp[0] = 0



    for i in range(1, n + 1):

        j = 1

        while j * j <= i:

            dp[i] = min(dp[i], dp[i - j * j] + 1)

            j += 1

    

    return dp[n]



# Test cases

test_cases = [12, 13, 1, 4, 3]



for n in test_cases:

    result = numSquares(n)

    print(f"Input: n = {n}")

    print(f"Output: {result}\n")





4.

def check_divisibility(num1, num2):

    prod = num1 * num2

    sum_nums = num1 + num2

    if prod % sum_nums == 0:

        return "YEAH"

    else:

        return "NAH"



# Test cases

test_cases = [

    (60, 48),

    (4, 8),

    (-10, 0),

    (12, 34),

    (16, 17)

]



for num1, num2 in test_cases:

    result = check_divisibility(num1, num2)

    print(f"Enter the numbers: {num1} {num2}")

    print(f"Output: {result}\n")





5.def find_peak_element(nums):

    left, right = 0, len(nums) - 1

    

    while left < right:

        mid = left + (right - left) // 2

        

        if nums[mid] < nums[mid + 1]:

            left = mid + 1

        else:

            right = mid

            

    return left



# Test cases

test_cases = [

    [1, 2, 3, 1],

    [1, 2, 1, 3, 5, 6, 4],

    [5, 10, 20, 15],

    [1, 3, 2, 4, 1, 0],

    [1, 1, 1, 3, 2, 1, 2]

]



for nums in test_cases:

    result = find_peak_element(nums)

    print(f"Input: {nums}\nOutput: {result}\n")











7.

def longest_substring(s, k):

    if not s:

        return 0

    

    # Count the frequency of each character in the string

    char_count = {}

    for char in s:

        char_count[char] = char_count.get(char, 0) + 1

    

    # Find the index of the first character that appears less than k times

    for i, char in enumerate(s):

        if char_count[char] < k:

            left_part = longest_substring(s[:i], k)

            right_part = longest_substring(s[i + 1:], k)

            return max(left_part, right_part)

    

    # All characters appear at least k times

    return len(s)



# Test cases

test_cases = [

    ("aaabb", 3),

    ("ababbc", 2),

    ("ababab", 3),

    ("xyzxyz", 2),

    ("12345", 0)

]



for s, k in test_cases:

    result = longest_substring(s, k)

    print(f"Input: s = '{s}', k = {k}\nOutput: {result}\n")





8.



def min_swaps_to_chessboard(board):

    n = len(board)

    

    # Count the number of 1s and 0s in the first row and first column

    row_count = [0] * n

    col_count = [0] * n

    for i in range(n):

        for j in range(n):

            if board[i][j] != (i + j) % 2:

                return -1

            row_count[i] += board[i][j]

            col_count[j] += board[i][j]

    

    # Check if it's possible to form a valid chessboard

    for count in (row_count, col_count):

        if sorted(count) != [n // 2, (n + 1) // 2]:

            return -1

    

    # Calculate the number of swaps needed for rows and columns

    row_diff = sum([abs(row_count[i] - n // 2) for i in range(n)]) // 2

    col_diff = sum([abs(col_count[i] - n // 2) for i in range(n)]) // 2

    

    return (row_diff + col_diff) // 2



# Test cases

test_cases = [

    [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]],

    [[0,1],[1,0]],

    [[1,0],[1,0]],

    [[0, 1, 0], [1, 0, 1], [1, 1, 0]],

    [[0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1]]

]



for board in test_cases:

    result = min_swaps_to_chessboard(board)

    print(f"Input: board = {board}\nOutput: {result}\n")





9.



def shuffle(l1, l2):

    result = []

    min_length = min(len(l1), len(l2))

    

    for i in range(min_length):

        result.append(l1[i])

        result.append(l2[i])

    

    result.extend(l1[min_length:])

    result.extend(l2[min_length:])

    

    return result



# Test cases

test_cases = [

    ([0, 4], [-1, 1]),

    ([5], [5]),

    ([10], [5]),

    ([6], [9])

]



for l1, l2 in test_cases:

    shuffled_list = shuffle(l1, l2)

    print(f"Shuffled list = {shuffled_list}")



Shuffled list = [0, -1, 4, 1]

Shuffled list = [5]

Shuffled list = [10, 5]

Shuffled list = [6, 9]





10.



def reverse_words(s):

    words = s.split()

    reversed_words = ' '.join(reversed(words))

    return reversed_words



# Test cases

test_cases = [

    "the sky is blue",

    " hello world ",

    "a good example",

    "apple is red",

    "Red rose"

]



for s in test_cases:

    result = reverse_words(s)

    print(f"Input: '{s}'\nOutput: '{result}'\n")



Input: 'the sky is blue'

Output: 'blue is sky the'



Input: ' hello world '

Output: 'world hello'



Input: 'a good example'

Output: 'example good a'



Input: 'apple is red'

Output: 'red is apple'



Input: 'Red rose'

Output: 'rose Red'



6.

n = int(input("Enter the number of rows:"))  

for i in range(n):  

   print(' '*(n-i), end='') 

   print(' '.join(map(str, str(11**i))))







